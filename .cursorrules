# Personal Branding Website with AI Chat

## Project Overview
A modern, techno-minimalist personal branding website with an integrated AI chatbot powered by Claude. The project combines a Next.js frontend with a FastAPI backend to create an engaging personal platform.

Reference to project description:

```1:12:README.md
# Personal Branding Website with AI Chat

A modern, techno-minimalist personal branding website with an integrated AI chatbot powered by Claude.

## Features

- Modern techno-minimalist design
- Responsive layout
- Animated components using Framer Motion
- AI chatbot integration with Claude
- Clean, organized code structure

```

This is a Next.js personal branding website with a strict 2-font typography system:
- **Space Grotesk** (font-display): Hero/branding elements ONLY
- **Inter** (font-sans): ALL content text (headings, body, forms, UI)
- **JetBrains Mono** (font-mono): Code blocks ONLY

## Tech Stack

### Frontend
- Next.js 14
- React 18
- Framer Motion for animations
- Tailwind CSS for styling
- i18next for internationalization
- MDX for content management

### Backend
- FastAPI
- Python 3.x
- Claude API (Anthropic)
- Uvicorn server

## Project Structure

```
project/
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ locales/
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îî‚îÄ‚îÄ content/
‚îÇ       ‚îú‚îÄ‚îÄ books/
‚îÇ       ‚îî‚îÄ‚îÄ posts/
‚îî‚îÄ‚îÄ backend/
    ‚îú‚îÄ‚îÄ app/
    ‚îÇ   ‚îú‚îÄ‚îÄ core/
    ‚îÇ   ‚îî‚îÄ‚îÄ services/
    ‚îî‚îÄ‚îÄ requirements.txt
```

## Setup Instructions

### 1. Frontend Setup

```bash
cd frontend
npm install
```

Required dependencies are listed in:

```12:27:frontend/package.json
  "dependencies": {
    "@mdx-js/react": "^3.0.0",
    "axios": "^1.6.7",
    "framer-motion": "^12.4.1",
    "gray-matter": "^4.0.3",
    "i18next": "^24.2.2",
    "nanoid": "^5.0.9",
    "next": "^14.1.0",
    "next-i18next": "^15.4.2",
    "next-mdx-remote": "^4.4.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^15.4.0",
    "react-icons": "^5.4.0",
    "xlsx": "^0.18.5"
  },
```


### 2. Backend Setup

```bash
cd backend
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
```

Backend dependencies:

```1:5:backend/requirements.txt
fastapi==0.115.8
uvicorn==0.34.0
python-dotenv==1.0.1
anthropic==0.45.2
pydantic-settings==2.1.0 
```


### 3. Environment Configuration

Create a `.env` file in the backend directory:
```
ANTHROPIC_API_KEY=your_api_key_here
```

The backend configuration is managed through:

```10:30:backend/app/core/config.py
class Settings(BaseSettings):
    # API Configuration
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Human-Technology Catalyst API"
    
    # Environment
    ENVIRONMENT: Environment = Environment.DEVELOPMENT
    DEBUG: bool = False
    
    # API Keys
    ANTHROPIC_API_KEY: str
    BACKUP_API_KEY: Optional[str] = None

    # CORS Settings
    CORS_ORIGINS: str = "http://localhost:3000"
    
    # AI Configuration
    AI_MODEL: str = "claude-3-opus-20240229"
    MAX_TOKENS: int = 1024
    TEMPERATURE: float = 0.7
    
```

## Key Features

### 1. Multilingual Support
The website supports multiple languages (English and Vietnamese) using i18next. Translations are stored in:
- English: `/frontend/public/locales/en/common.json`
- Vietnamese: `/frontend/public/locales/vi/common.json`

### 2. Content Management
- Books and reading notes are managed through MDX files in `/frontend/content/books/`
- Blog posts are stored in `/frontend/content/posts/`

### 3. AI Integration
The AI chatbot is configured with specific guidelines

### 4. Interactive Components
- Reading progress indicator
- Animated UI elements using Framer Motion
- Responsive design

## Development Workflow

### Running Development Servers

1. Frontend:
```bash
cd frontend
npm run dev
# Accessible at http://localhost:3000
```

2. Backend:
```bash
cd backend
uvicorn main:app --reload
# Accessible at http://localhost:8000
```

### Translation Management
The project includes a translation management system

## Security Considerations

1. API Key Protection:
```gitignore
startLine: 7
endLine: 16
```

2. CORS Configuration:

```23:24:backend/app/core/config.py
    # CORS Settings
    CORS_ORIGINS: str = "http://localhost:3000"
```


## Styling Guidelines

The project uses Tailwind CSS with custom configuration:


## Production Deployment

1. Build the frontend:
```bash
cd frontend
npm run build
```

2. Configure production environment variables
3. Deploy backend using a production-grade ASGI server
4. Set up proper CORS and security headers

## Additional Resources

- Font configuration: See `frontend/pages/_document.js`
- Component examples: Check `frontend/components/` directory
- API documentation: Available at `http://localhost:8000/docs` when running the backend

## üö® CRITICAL CSS RULES

### ‚ùå STRICTLY FORBIDDEN
```css
/* NEVER add !important to base layer styles */
html, body, h1, h2, h3, h4, h5, h6 {
  font-family: ... !important; /* ‚ùå FORBIDDEN */
}

/* NEVER use direct font-family in CSS */
.component { font-family: 'Inter', sans-serif; } /* ‚ùå Use Tailwind classes */

/* NEVER use serif fonts anywhere */
.text { font-family: 'Times', serif; } /* ‚ùå BRAND VIOLATION */

/* NEVER exceed 3 !important per CSS file */
/* Current limit: globals.css has 3 emergency utilities only */
```

### ‚úÖ REQUIRED PATTERNS
```css
/* Base layer: NO !important allowed */
@layer base {
  html { font-family: var(--font-inter), 'Inter', system-ui, sans-serif; }
}

/* Utilities layer: emergency only */
@layer utilities {
  .font-sans-force { font-family: ... !important; } /* Emergency only */
}
```

## üé® TYPOGRAPHY ENFORCEMENT

### Component Usage Rules
```jsx
/* ‚úÖ CORRECT Tailwind class usage */
<h1 className="font-sans text-heading-xl">Content Heading</h1>
<h1 className="font-display text-display-xl">Hero Title</h1>
<code className="font-mono">Code snippet</code>

/* ‚ùå FORBIDDEN patterns */
<h1 style={{fontFamily: 'Inter'}}>Title</h1>               // ‚ùå No inline styles
<h3 className="font-display">Article Heading</h3>          // ‚ùå Content must use font-sans
<p className="font-display">Body text</p>                  // ‚ùå Content must use font-sans
```

### Font Distribution Rules
- **font-display (Space Grotesk)**: Hero sections, landing page titles, section headers, branding elements
- **font-sans (Inter)**: Article headings, body text, navigation, buttons, forms, footer, ALL content
- **font-mono (JetBrains Mono)**: Code blocks, technical content, monospace needs

## üîß DEVELOPMENT STANDARDS

### CSS Architecture
```css
/* Layer hierarchy (mandatory) */
@layer base     { /* Foundation - no !important */ }
@layer utilities { /* Overrides - emergency !important only */ }

/* Emergency utilities (keep these exactly) */
.font-sans-force { font-family: var(--font-inter), 'Inter', system-ui, sans-serif !important; }
.font-display-force { font-family: var(--font-space-grotesk), 'Space Grotesk', 'Inter', system-ui, sans-serif !important; }
.font-mono-force { font-family: var(--font-jetbrains-mono), 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace !important; }
```

### Component Patterns
```jsx
// Heading component pattern
const Heading = ({ variant = "content", children, className, ...props }) => {
  const fontClass = variant === "display" ? "font-display" : "font-sans";
  return (
    <h1 className={`${fontClass} ${className}`} {...props}>
      {children}
    </h1>
  );
};

// Usage examples
<Heading variant="display">Hero Title</Heading>  // Space Grotesk
<Heading>Article Title</Heading>                 // Inter (default)
```

## üåç INTERNATIONALIZATION

### Vietnamese Text Requirements
- **Primary font**: Inter (excellent Vietnamese support)
- **Fallback chain**: 'Noto Sans', 'system-ui', 'sans-serif'
- **Test diacritics**: ƒÉ √¢ √™ √¥ ∆° ∆∞ ƒë √† √° ·∫° ·∫£ √£
- **NO serif fonts**: Vietnamese + serif = poor readability

### Font Loading
```javascript
// Next.js font configuration (maintain this structure)
import { Inter, Space_Grotesk, JetBrains_Mono } from 'next/font/google'

const inter = Inter({
  subsets: ['latin', 'vietnamese'],
  variable: '--font-inter',
  display: 'swap'
});
```

## üö® ERROR PREVENTION

### Pre-Commit Validation
Before ANY commit:
1. Check `!important` count: `grep -r "!important" styles/` ‚â§ 3 results
2. Verify no serif fonts: `grep -r "serif" styles/` (except in emergency utilities)
3. Test Vietnamese text rendering
4. Verify font variables resolve in DevTools

### Debug Protocol
If serif fonts appear:
1. **Inspect element** ‚Üí identify conflicting CSS
2. **Create targeted fix** with higher specificity (NO !important)
3. **Temporarily apply** `.font-sans-force` if needed
4. **Document root cause** and permanent solution
5. **Remove emergency class** after fix

## üì± RESPONSIVE CONSIDERATIONS

### Font Scaling
```css
/* Mobile-first typography scaling */
.text-heading-xl { font-size: clamp(1.75rem, 4vw, 2.5rem); }
.text-body { font-size: clamp(0.875rem, 2vw, 1rem); }

/* Maintain font families across all breakpoints */
@media (min-width: 768px) {
  .font-sans { /* Still Inter, never change font-family in media queries */ }
}
```

## üõ†Ô∏è TOOLS & PLUGINS

### Required Tailwind Plugins
```javascript
// tailwind.config.js
plugins: [
  require('@tailwindcss/forms'),      // Form styling consistency
  require('@tailwindcss/typography'), // Prose styling with Inter
]
```

### Typography Plugin Configuration
```javascript
typography: {
  DEFAULT: {
    css: {
      h1: { fontFamily: theme('fontFamily.sans').join(',') }, // Force Inter
      h2: { fontFamily: theme('fontFamily.sans').join(',') },
      h3: { fontFamily: theme('fontFamily.sans').join(',') },
      // ... all headings use Inter, never Space Grotesk in content
    }
  }
}
```

## üéØ QUALITY GATES

### Before Any Font-Related Change
- [ ] Typography system maintains 2-font rule
- [ ] No new !important in @layer base
- [ ] All content uses Inter (font-sans)
- [ ] Display elements use Space Grotesk (font-display) appropriately
- [ ] Code uses JetBrains Mono (font-mono)
- [ ] Vietnamese characters render correctly
- [ ] Emergency utilities remain exactly 3 total

### Performance Requirements
- Font loading with `font-display: swap`
- CSS variables properly resolved
- No FOUT (Flash of Unstyled Text)
- Build size impact minimal

## üìö FILE STRUCTURE AWARENESS

```
styles/
‚îú‚îÄ‚îÄ globals.css          # Base styles, emergency utilities (‚â§3 !important)
‚îú‚îÄ‚îÄ components/          # Component-specific styles (‚â§1 !important each)
‚îî‚îÄ‚îÄ typography.css       # Typography utilities (if separate)

components/
‚îú‚îÄ‚îÄ ui/                  # Reusable UI components
‚îî‚îÄ‚îÄ typography/          # Text components (Heading, Text, etc.)
```

## ‚ö° PERFORMANCE RULES

### CSS Optimization
- Use CSS layers properly: @layer base, @layer utilities
- Minimize CSS specificity wars
- Prefer Tailwind classes over custom CSS
- Keep emergency utilities minimal and documented

### Font Loading Strategy
- Preload critical fonts
- Use font-display: swap
- Optimize for Core Web Vitals
- Test loading on slow networks

## üîç DEBUGGING GUIDE

### Common Issues & Solutions
```css
/* Issue: Serif fonts appearing */
/* Solution: Check computed styles, add targeted specificity */
.specific-component h2 { font-family: var(--font-inter), 'Inter', system-ui, sans-serif; }

/* Issue: Font variables not resolving */
/* Solution: Verify CSS variable definitions in :root */
:root { --font-inter: 'Inter', system-ui, sans-serif; }
```

---

**SUMMARY**: Maintain strict 2-font typography system, avoid !important in base styles, use proper CSS cascade, ensure Vietnamese support, and follow established component patterns. Typography consistency is critical for brand identity and user experience.